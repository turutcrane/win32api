// Code generated by mkapisys. DO NOT EDIT.
package win32api
type Wndclassex struct {
	Size UINT
	Style UINT
	WndProc WNDPROC
	ClsExtra int32
	WndExtra int32
	Instance HINSTANCE
	Icon HICON
	Cursor HCURSOR
	Background HBRUSH
	MenuName *uint16
	ClassName *uint16
	IconSm HICON
}

type Createstruct struct {
	CreateParams LPVOID
	Instance HINSTANCE
	Menu HMENU
	Parent HWND
	Cy int32
	Cx int32
	Y int32
	X int32
	Style LONG
	Name *uint16
	Class *uint16
	ExStyle DWORD
}

type Point struct {
	X LONG
	Y LONG
}

type Points struct {
	X SHORT
	Y SHORT
}

type Rect struct {
	Left LONG
	Top LONG
	Right LONG
	Bottom LONG
}

type Paintstruct struct {
	Hdc HDC
	Erase BOOL
	Paint Rect
	Restore BOOL
	IncUpdate BOOL
	Reserved [32]BYTE
}

type Findreplace struct {
	StructSize DWORD
	Owner HWND
	Instance HINSTANCE
	Flags DWORD
	FindWhat *uint16
	ReplaceWith *uint16
	FindWhatLen WORD
	ReplaceWithLen WORD
	CustData LPARAM
	Hook LPFRHOOKPROC
	TemplateName *uint16
}

type Pixelformatdescriptor struct {
	Size WORD
	Version WORD
	Flags DWORD
	PixelType BYTE
	ColorBits BYTE
	RedBits BYTE
	RedShift BYTE
	GreenBits BYTE
	GreenShift BYTE
	BlueBits BYTE
	BlueShift BYTE
	AlphaBits BYTE
	AlphaShift BYTE
	AccumBits BYTE
	AccumRedBits BYTE
	AccumGreenBits BYTE
	AccumBlueBits BYTE
	AccumAlphaBits BYTE
	DepthBits BYTE
	StencilBits BYTE
	AuxBuffers BYTE
	LayerType BYTE
	Reserved BYTE
	LayerMask DWORD
	VisibleMask DWORD
	DamageMask DWORD
}

type Trackmouseevent struct {
	Size DWORD
	Flags DWORD
	Track HWND
	HoverTime DWORD
}

type Bitmapinfoheader struct {
	Size DWORD
	Width LONG
	Height LONG
	Planes WORD
	BitCount WORD
	Compression DWORD
	SizeImage DWORD
	XPelsPerMeter LONG
	YPelsPerMeter LONG
	ClrUsed DWORD
	ClrImportant DWORD
}

//sys GetModuleHandle(lpModuleName *uint16) (r HMODULE, err error) = GetModuleHandleW
//sys ScreenToClient(hWnd HWND, lpPoint *Point) (r bool) = user32.ScreenToClient
//sys PtInRegion(hrgn HRGN, x int, y int) (r bool) = gdi32.PtInRegion
//sys EndDeferWindowPos(hWinPosInfo HDWP) (err error) = user32.EndDeferWindowPos
//sys CreateSolidBrush(color COLORREF) (r HBRUSH) = gdi32.CreateSolidBrush
//sys DeleteObject(ho HGDIOBJ) (r bool) = gdi32.DeleteObject
//sys CreateFont(cHeight int, cWidth int, cEscapement int, cOrientation int, cWeight int, bItalic bool, bUnderline bool, bStrikeOut bool, iCharSet DWORD, iOutPrecision DWORD, iClipPrecision DWORD, iQuality DWORD, iPitchAndFamily DWORD, pszFaceName *uint16) (r HFONT) = gdi32.CreateFontW
//sys CreateRectRgn(x1 int, y1 int, x2 int, y2 int) (r HRGN) = gdi32.CreateRectRgn
//sys DestroyWindow(hWnd HWND) (err error) = user32.DestroyWindow
//sys PostMessage(hWnd HWND, Msg UINT, wParam WPARAM, lParam LPARAM) (err error) = user32.PostMessageW
//sys IsRectEmpty(lprc *Rect) (r bool) = user32.IsRectEmpty
//sys AdjustWindowRectEx(lpRect *Rect, dwStyle DWORD, bMenu bool, dwExStyle DWORD) (err error) = user32.AdjustWindowRectEx
//sys SetParent(hWndChild HWND, hWndNewParent HWND) (r HWND, err error) = user32.SetParent
//sys SetWindowPos(hWnd HWND, hWndInsertAfter HWND, X int, Y int, cx int, cy int, uFlags UINT) (err error) = user32.SetWindowPos
//sys dialogBoxParamW(hInstance HINSTANCE, lpTemplateName *uint16, hWndParent HWND, lpDialogFunc DLGPROC, dwInitParam LPARAM) (r INT_PTR, err error) [failretval==0xffffffff] = user32.DialogBoxParamW
//sys EndDialog(hDlg HWND, nResult INT_PTR) (err error) = user32.EndDialog
//sys SetFocus(hWnd HWND) (r HWND, err error) = user32.SetFocus
//sys FindText(Arg1 *Findreplace) (r HWND) = comdlg32.FindTextW
//sys CommDlgExtendedError() (r DWORD) = comdlg32.CommDlgExtendedError
//sys RegisterWindowMessage(lpString *uint16) (r UINT, err error) = user32.RegisterWindowMessageW
//sys SetWindowText(hWnd HWND, lpString *uint16) (err error) = user32.SetWindowTextW
//sys IsWindow(hWnd HWND) (r bool) = user32.IsWindow
//sys ClientToScreen(hWnd HWND, lpPoint *Point) (r bool) = user32.ClientToScreen
//sys ChoosePixelFormat(hdc HDC, ppfd *Pixelformatdescriptor) (r int, err error) = gdi32.ChoosePixelFormat
//sys SetPixelFormat(hdc HDC, format int, ppfd *Pixelformatdescriptor) (err error) = gdi32.SetPixelFormat
//sys SwapBuffers(Arg1 HDC) (err error) = gdi32.SwapBuffers
//sys WglCreateContext(Arg1 HDC) (r HGLRC, err error) = Opengl32.wglCreateContext
//sys WglMakeCurrent(arg1 HDC, arg2 HGLRC) (err error) = Opengl32.wglMakeCurrent
//sys GetDpiForWindow(hwnd HWND) (r UINT) = user32.GetDpiForWindow
//sys CreateWindowEx(dwExStyle DWORD, lpClassName *uint16, lpWindowName *uint16, dwStyle DWORD, X int, Y int, nWidth int, nHeight int, hWndParent HWND, hMenu HMENU, hInstance HINSTANCE, lpParam LPVOID) (r HWND, err error) = user32.CreateWindowExW
//sys LoadIcon(hInstance HINSTANCE, lpIconName *uint16) (r HICON, err error) = user32.LoadIconW
//sys LoadCursor(hInstance HINSTANCE, lpCursorName *uint16) (r HCURSOR, err error) = user32.LoadCursorW
//sys RegisterClassEx(Arg1 *Wndclassex) (r ATOM, err error) = user32.RegisterClassExW
//sys GetClientRect(hWnd HWND, lpRect *Rect) (err error) = user32.GetClientRect
//sys ShowWindow(hWnd HWND, nCmdShow int) (r bool) = user32.ShowWindow
//sys UpdateWindow(hWnd HWND) (r bool) = user32.UpdateWindow
//sys DefWindowProc(hWnd HWND, Msg UINT, wParam WPARAM, lParam LPARAM) (r LRESULT) = user32.DefWindowProcW
//sys EnableNonClientDpiScaling(hwnd HWND) (err error) = user32.EnableNonClientDpiScaling
//sys GetDC(hWnd HWND) (r HDC) = user32.GetDC
//sys GetDeviceCaps(hdc HDC, index int) (r int) = gdi32.GetDeviceCaps
//sys ReleaseDC(hWnd HWND, hDC HDC) (r int) = user32.ReleaseDC
//sys GetProcessDpiAwareness(hprocess HANDLE, value *ProcessDpiAwareness) (r HRESULT) = Shcore.GetProcessDpiAwareness
//sys CallWindowProc(lpPrevWndFunc WNDPROC, hWnd HWND, Msg UINT, wParam WPARAM, lParam LPARAM) (r LRESULT) = user32.CallWindowProcW
//sys EnableWindow(hWnd HWND, bEnable bool) (r bool) = user32.EnableWindow
//sys SendMessage(hWnd HWND, Msg UINT, wParam WPARAM, lParam LPARAM) (r LRESULT) = user32.SendMessageW
//sys BeginPaint(hWnd HWND, lpPaint *Paintstruct) (r HDC) = user32.BeginPaint
//sys EndPaint(hWnd HWND, lpPaint *Paintstruct) = user32.EndPaint
//sys IsWindowEnabled(hWnd HWND) (r bool) = user32.IsWindowEnabled
//sys IsWindowVisible(hWnd HWND) (r bool) = user32.IsWindowVisible
//sys SetMenu(hWnd HWND, hMenu HMENU) (err error) = user32.SetMenu
//sys BeginDeferWindowPos(nNumWindows int) (r HDWP, err error) = user32.BeginDeferWindowPos
//sys DeferWindowPos(hWinPosInfo HDWP, hWnd HWND, hWndInsertAfter HWND, x int, y int, cx int, cy int, uFlags UINT) (r HDWP, err error) = user32.DeferWindowPos
//sys GetMessageExtraInfo() (r LPARAM) = user32.GetMessageExtraInfo
//sys GetMessageTime() (r LONG) = user32.GetMessageTime
//sys GetSystemMetrics(nIndex int) (r int) = user32.GetSystemMetrics
//sys GetDoubleClickTime() (r UINT) = user32.GetDoubleClickTime
//sys SetCapture(hWnd HWND) (r HWND) = user32.SetCapture
//sys GetKeyState(nVirtKey int) (r SHORT) = user32.GetKeyState
//sys GetCapture() (r HWND) = user32.GetCapture
//sys ReleaseCapture() (err error) = user32.ReleaseCapture
//sys QueryPerformanceCounter(lpPerformanceCount *LARGE_INTEGER) (err error) = QueryPerformanceCounter
//sys QueryPerformanceFrequency(lpFrequency *LARGE_INTEGER) (err error) = QueryPerformanceFrequency
//sys TrackMouseEvent(lpEventTrack *Trackmouseevent) (err error) = user32.TrackMouseEvent
//sys GetCursorPos(lpPoint *Point) (err error) = user32.GetCursorPos
//sys GetKeyboardLayout(idThread DWORD) (r HKL) = user32.GetKeyboardLayout
//sys VkKeyScanEx(ch WCHAR, dwhkl HKL) (r SHORT) = user32.VkKeyScanExW
//sys GetMenu(hWnd HWND) (r HMENU) = user32.GetMenu
//sys GetSubMenu(hMenu HMENU, nPos int) (r HMENU) = user32.GetSubMenu
//sys RemoveMenu(hMenu HMENU, uPosition UINT, uFlags UINT) (err error) = user32.RemoveMenu
//sys GetCommandLine() (r *uint16) = GetCommandLineW
//sys sHGetFolderPath(hwnd HWND, csidl int, hToken HANDLE, dwFlags DWORD, pszPath *uint16) (r HRESULT) = shell32.SHGetFolderPathW
//sys sHGetKnownFolderPath(rfid REFKNOWNFOLDERID, dwFlags DWORD, hToken HANDLE, ppszPath *PWSTR) (r HRESULT) = Shell32.SHGetKnownFolderPath
//sys CoTaskMemFree(pv LPVOID) = Ole32.CoTaskMemFree
//sys FindResource(hModule HMODULE, lpName *uint16, lpType *uint16) (r HRSRC, err error) = FindResourceW
//sys LoadResource(hModule HMODULE, hResInfo HRSRC) (r HGLOBAL, err error) = LoadResource
//sys SizeofResource(hModule HMODULE, hResInfo HRSRC) (r DWORD, err error) = SizeofResource
//sys LockResource(hResData HGLOBAL) (r LPVOID, err error) = LockResource
//sys CreateIcon(hInstance HINSTANCE, nWidth int, nHeight int, cPlanes BYTE, cBitsPixel BYTE, lpbANDbits *BYTE, lpbXORbits *BYTE) (r HICON, err error) = user32.CreateIcon
