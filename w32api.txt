//
typedef struct tagWNDCLASSEXW {
  UINT      cbSize;
  UINT      style;
  WNDPROC   lpfnWndProc;
  int       cbClsExtra;
  int       cbWndExtra;
  HINSTANCE hInstance;
  HICON     hIcon;
  HCURSOR   hCursor;
  HBRUSH    hbrBackground;
  LPCWSTR   lpszMenuName;
  LPCWSTR   lpszClassName;
  HICON     hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW;

typedef struct tagCREATESTRUCTW {
  LPVOID    lpCreateParams;
  HINSTANCE hInstance;
  HMENU     hMenu;
  HWND      hwndParent;
  int       cy;
  int       cx;
  int       y;
  int       x;
  LONG      style;
  LPCWSTR   lpszName;
  LPCWSTR   lpszClass;
  DWORD     dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;

typedef struct tagPOINT {
  LONG x;
  LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

typedef struct tagPOINTS {
  SHORT x;
  SHORT y;
} POINTS, *PPOINTS, *LPPOINTS;

typedef struct tagRECT {
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;

typedef struct tagPAINTSTRUCT {
  HDC  hdc;
  BOOL fErase;
  RECT rcPaint;
  BOOL fRestore;
  BOOL fIncUpdate;
  BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagFINDREPLACEW {
  DWORD        lStructSize;
  HWND         hwndOwner;
  HINSTANCE    hInstance;
  DWORD        Flags;
  LPWSTR       lpstrFindWhat;
  LPWSTR       lpstrReplaceWith;
  WORD         wFindWhatLen;
  WORD         wReplaceWithLen;
  LPARAM       lCustData;
  LPFRHOOKPROC lpfnHook;
  LPCWSTR      lpTemplateName;
} FINDREPLACEW, *LPFINDREPLACEW;

typedef struct tagPIXELFORMATDESCRIPTOR {
  WORD  nSize;
  WORD  nVersion;
  DWORD dwFlags;
  BYTE  iPixelType;
  BYTE  cColorBits;
  BYTE  cRedBits;
  BYTE  cRedShift;
  BYTE  cGreenBits;
  BYTE  cGreenShift;
  BYTE  cBlueBits;
  BYTE  cBlueShift;
  BYTE  cAlphaBits;
  BYTE  cAlphaShift;
  BYTE  cAccumBits;
  BYTE  cAccumRedBits;
  BYTE  cAccumGreenBits;
  BYTE  cAccumBlueBits;
  BYTE  cAccumAlphaBits;
  BYTE  cDepthBits;
  BYTE  cStencilBits;
  BYTE  cAuxBuffers;
  BYTE  iLayerType;
  BYTE  bReserved;
  DWORD dwLayerMask;
  DWORD dwVisibleMask;
  DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;

typedef struct tagTRACKMOUSEEVENT {
  DWORD cbSize;
  DWORD dwFlags;
  HWND  hwndTrack;
  DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

//
HMODULE GetModuleHandleW(
  LPCWSTR lpModuleName
);

//
@ns user32
@noerr
BOOL ScreenToClient(
  HWND    hWnd,
  LPPOINT lpPoint
);

@ns gdi32
@noerr
BOOL PtInRegion(
  HRGN hrgn,
  int  x,
  int  y
);

@ns user32
@erroronly
BOOL EndDeferWindowPos(
  HDWP hWinPosInfo
);

@ns gdi32
@noerr
HBRUSH CreateSolidBrush(
  COLORREF color
);

@ns gdi32
@noerr
BOOL DeleteObject(
  HGDIOBJ ho
);

@ns gdi32
@noerr
HFONT CreateFontW(
  int     cHeight,
  int     cWidth,
  int     cEscapement,
  int     cOrientation,
  int     cWeight,
  DWORD   bItalic,
  DWORD   bUnderline,
  DWORD   bStrikeOut,
  DWORD   iCharSet,
  DWORD   iOutPrecision,
  DWORD   iClipPrecision,
  DWORD   iQuality,
  DWORD   iPitchAndFamily,
  LPCWSTR pszFaceName
);

@ns gdi32
@noerr
HRGN CreateRectRgn(
  int x1,
  int y1,
  int x2,
  int y2
);

@ns user32
@erroronly
BOOL DestroyWindow(
  HWND hWnd
);

@ns user32
@erroronly
BOOL PostMessageW(
  HWND   hWnd,
  UINT   Msg,
  WPARAM wParam,
  LPARAM lParam
);

@ns user32
@noerr
BOOL IsRectEmpty(
  const RECT *lprc
);

@ns user32
@erroronly
BOOL AdjustWindowRectEx(
  LPRECT lpRect,
  DWORD  dwStyle,
  BOOL   bMenu,
  DWORD  dwExStyle
);

@ns user32
HWND SetParent(
  HWND hWndChild,
  HWND hWndNewParent
);

@ns user32
@erroronly
BOOL SetWindowPos(
  HWND hWnd,
  HWND hWndInsertAfter,
  int  X,
  int  Y,
  int  cx,
  int  cy,
  UINT uFlags
);

@ns user32
@failretval 0xffffffff
@funcname   dialogBoxParamW
INT_PTR DialogBoxParamW(
  HINSTANCE hInstance,
  LPCWSTR   lpTemplateName,
  HWND      hWndParent,
  DLGPROC   lpDialogFunc,
  LPARAM    dwInitParam
);

@ns user32
@erroronly
BOOL EndDialog(
  HWND    hDlg,
  INT_PTR nResult
);

@ns user32
HWND SetFocus(
  HWND hWnd
);

@ns comdlg32
@noerr
HWND FindTextW(
  LPFINDREPLACEW Arg1
);

@ns comdlg32
@noerr
DWORD CommDlgExtendedError();

@ns user32
UINT RegisterWindowMessageW(
  LPCWSTR lpString
);

@ns user32
@erroronly
BOOL SetWindowTextW(
  HWND    hWnd,
  LPCWSTR lpString
);

@ns user32
@noerr
BOOL IsWindow(
  HWND hWnd
);

@ns user32
@noerr
BOOL ClientToScreen(
  HWND    hWnd,
  LPPOINT lpPoint
);

@ns gdi32
int ChoosePixelFormat(
  HDC                         hdc,
  const PIXELFORMATDESCRIPTOR *ppfd
);

@ns gdi32
@erroronly
BOOL SetPixelFormat(
  HDC                         hdc,
  int                         format,
  const PIXELFORMATDESCRIPTOR *ppfd
);

@ns gdi32
@erroronly
BOOL SwapBuffers(
  HDC Arg1
);

@ns Opengl32
HGLRC wglCreateContext(
  HDC Arg1
);

@ns Opengl32
@erroronly
BOOL wglMakeCurrent(
  HDC   arg1,
  HGLRC arg2
);

@ns user32
@noerr
UINT GetDpiForWindow(
  HWND hwnd
);

@ns user32
HWND CreateWindowExW(
  DWORD     dwExStyle,
  LPCWSTR   lpClassName,
  LPCWSTR   lpWindowName,
  DWORD     dwStyle,
  int       X,
  int       Y,
  int       nWidth,
  int       nHeight,
  HWND      hWndParent,
  HMENU     hMenu,
  HINSTANCE hInstance,
  LPVOID    lpParam
);

@ns user32
HICON LoadIconW(
  HINSTANCE hInstance,
  LPCWSTR   lpIconName
);

@ns user32
HCURSOR LoadCursorW(
  HINSTANCE hInstance,
  LPCWSTR   lpCursorName
);

@ns user32
ATOM RegisterClassExW(
  const WNDCLASSEXW *Arg1
);

@ns user32
@erroronly
BOOL GetClientRect(
  HWND   hWnd,
  LPRECT lpRect
);

@ns user32
@noerr
BOOL ShowWindow(
  HWND hWnd,
  int  nCmdShow
);

@ns user32
@noerr
BOOL UpdateWindow(
  HWND hWnd
);

@ns user32
@noerr
LRESULT DefWindowProcW(
  HWND   hWnd,
  UINT   Msg,
  WPARAM wParam,
  LPARAM lParam
);

@ns user32
@erroronly
BOOL EnableNonClientDpiScaling(
  HWND hwnd
);

@ns user32
@noerr
HDC GetDC(
  HWND hWnd
);

@ns gdi32
@noerr
int GetDeviceCaps(
  HDC hdc,
  int index
);

@ns user32
@noerr
int ReleaseDC(
  HWND hWnd,
  HDC  hDC
);

@ns Shcore
@noerr
HRESULT GetProcessDpiAwareness(
  HANDLE                hprocess,
  PROCESS_DPI_AWARENESS *value
);

@ns user32
@noerr
LRESULT CallWindowProcW(
  WNDPROC lpPrevWndFunc,
  HWND    hWnd,
  UINT    Msg,
  WPARAM  wParam,
  LPARAM  lParam
);

@ns user32
@noerr
BOOL EnableWindow(
  HWND hWnd,
  BOOL bEnable
);

@ns user32
@noerr
LRESULT SendMessageW(
  HWND   hWnd,
  UINT   Msg,
  WPARAM wParam,
  LPARAM lParam
);

@ns user32
@noerr
HDC BeginPaint(
  HWND          hWnd,
  LPPAINTSTRUCT lpPaint
);

@ns user32
@noreturn
BOOL EndPaint(
  HWND              hWnd,
  const PAINTSTRUCT *lpPaint
);

@ns user32
@noerr
BOOL IsWindowEnabled(
  HWND hWnd
);

@ns user32
@noerr
BOOL IsWindowVisible(
  HWND hWnd
);

@ns user32
@erroronly
BOOL SetMenu(
  HWND  hWnd,
  HMENU hMenu
);

@ns user32
HDWP BeginDeferWindowPos(
  int nNumWindows
);

@ns user32
HDWP DeferWindowPos(
  HDWP hWinPosInfo,
  HWND hWnd,
  HWND hWndInsertAfter,
  int  x,
  int  y,
  int  cx,
  int  cy,
  UINT uFlags
);

@ns user32
@noerr
LPARAM GetMessageExtraInfo();

@ns user32
@noerr
LONG GetMessageTime();

@ns user32
@noerr
int GetSystemMetrics(
  int nIndex
);

@ns user32
@noerr
UINT GetDoubleClickTime();

@ns user32
@noerr
HWND SetCapture(
  HWND hWnd
);

@ns user32
@noerr
SHORT GetKeyState(
  int nVirtKey
);

@ns user32
@noerr
HWND GetCapture();

@ns user32
@erroronly
BOOL ReleaseCapture();

@erroronly
BOOL QueryPerformanceCounter(
  LARGE_INTEGER *lpPerformanceCount
);

@erroronly
BOOL QueryPerformanceFrequency(
  LARGE_INTEGER *lpFrequency
);

@ns user32
@erroronly
BOOL TrackMouseEvent(
  LPTRACKMOUSEEVENT lpEventTrack
);

@ns user32
@erroronly
BOOL GetCursorPos(
  LPPOINT lpPoint
);

@ns user32
@noerr
HKL GetKeyboardLayout(
  DWORD idThread
);

@ns user32
@noerr
SHORT VkKeyScanExW(
  WCHAR ch,
  HKL   dwhkl
);