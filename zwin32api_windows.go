// Code generated by 'go generate'; DO NOT EDIT.

package win32api

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")
	moduser32   = windows.NewLazySystemDLL("user32.dll")
	modshcore   = windows.NewLazySystemDLL("shcore.dll")
	modgdi32    = windows.NewLazySystemDLL("gdi32.dll")

	procGetModuleHandleW          = modkernel32.NewProc("GetModuleHandleW")
	procSetLastError              = modkernel32.NewProc("SetLastError")
	procGetWindowLongPtrW         = moduser32.NewProc("GetWindowLongPtrW")
	procSetWindowLongPtrW         = moduser32.NewProc("SetWindowLongPtrW")
	procGetDpiForWindow           = moduser32.NewProc("GetDpiForWindow")
	procCreateWindowExW           = moduser32.NewProc("CreateWindowExW")
	procLoadIconW                 = moduser32.NewProc("LoadIconW")
	procLoadCursorW               = moduser32.NewProc("LoadCursorW")
	procRegisterClassExW          = moduser32.NewProc("RegisterClassExW")
	procGetClientRect             = moduser32.NewProc("GetClientRect")
	procShowWindow                = moduser32.NewProc("ShowWindow")
	procUpdateWindow              = moduser32.NewProc("UpdateWindow")
	procDefWindowProcW            = moduser32.NewProc("DefWindowProcW")
	procEnableNonClientDpiScaling = moduser32.NewProc("EnableNonClientDpiScaling")
	procGetDC                     = moduser32.NewProc("GetDC")
	procGetDeviceCaps             = moduser32.NewProc("GetDeviceCaps")
	procReleaseDC                 = moduser32.NewProc("ReleaseDC")
	procGetProcessDpiAwareness    = modshcore.NewProc("GetProcessDpiAwareness")
	procCreateSolidBrush          = modgdi32.NewProc("CreateSolidBrush")
)

func GetModuleHandle(m *uint16) (handle HMODULE, err error) {
	r0, _, e1 := syscall.Syscall(procGetModuleHandleW.Addr(), 1, uintptr(unsafe.Pointer(m)), 0, 0)
	handle = HMODULE(r0)
	if handle == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetLastError(dwErrCode DWORD) {
	syscall.Syscall(procSetLastError.Addr(), 1, uintptr(dwErrCode), 0, 0)
	return
}

func getWindowLongPtr(hWnd HWND, nIndex int) (longPtr uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procGetWindowLongPtrW.Addr(), 2, uintptr(hWnd), uintptr(nIndex), 0)
	longPtr = uintptr(r0)
	if longPtr == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func setWindowLongPtr(hWnd HWND, nIndex int, dwNewLong uintptr) (longPtr uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procSetWindowLongPtrW.Addr(), 3, uintptr(hWnd), uintptr(nIndex), uintptr(dwNewLong))
	longPtr = uintptr(r0)
	if longPtr == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetDpiForWindow(hwnd HWND) (dpi UINT) {
	r0, _, _ := syscall.Syscall(procGetDpiForWindow.Addr(), 1, uintptr(hwnd), 0, 0)
	dpi = UINT(r0)
	return
}

func CreateWindowEx(dwExStyle DWORD, lpClassName *uint16, lpWindowName *uint16, dwStyle DWORD, x int, y int, nWidth int, nHeight int, hWndParent HWND, hMenu HMENU, hInstance HINSTANCE, lpParam LPVOID) (hwnd HWND, err error) {
	r0, _, e1 := syscall.Syscall12(procCreateWindowExW.Addr(), 12, uintptr(dwExStyle), uintptr(unsafe.Pointer(lpClassName)), uintptr(unsafe.Pointer(lpWindowName)), uintptr(dwStyle), uintptr(x), uintptr(y), uintptr(nWidth), uintptr(nHeight), uintptr(hWndParent), uintptr(hMenu), uintptr(hInstance), uintptr(lpParam))
	hwnd = HWND(r0)
	if hwnd == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func LoadIcon(hInstance HINSTANCE, lpIconName *uint16) (icon HICON, err error) {
	r0, _, e1 := syscall.Syscall(procLoadIconW.Addr(), 2, uintptr(hInstance), uintptr(unsafe.Pointer(lpIconName)), 0)
	icon = HICON(r0)
	if icon == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func LoadCursor(hInstance HINSTANCE, lpCursorName *uint16) (cursor HCURSOR, err error) {
	r0, _, e1 := syscall.Syscall(procLoadCursorW.Addr(), 2, uintptr(hInstance), uintptr(unsafe.Pointer(lpCursorName)), 0)
	cursor = HCURSOR(r0)
	if cursor == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func RegisterClassEx(Arg1 *Wndclassex) (atm ATOM) {
	r0, _, _ := syscall.Syscall(procRegisterClassExW.Addr(), 1, uintptr(unsafe.Pointer(Arg1)), 0, 0)
	atm = ATOM(r0)
	return
}

func GetClientRect(hWnd HWND, lpRect *RECT) (b bool, err error) {
	r0, _, e1 := syscall.Syscall(procGetClientRect.Addr(), 2, uintptr(hWnd), uintptr(unsafe.Pointer(lpRect)), 0)
	b = r0 != 0
	if b == false {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func ShowWindow(hWnd HWND, nCmdShow int) (b bool) {
	r0, _, _ := syscall.Syscall(procShowWindow.Addr(), 2, uintptr(hWnd), uintptr(nCmdShow), 0)
	b = r0 != 0
	return
}

func UpdateWindow(hWnd HWND) (b bool) {
	r0, _, _ := syscall.Syscall(procUpdateWindow.Addr(), 1, uintptr(hWnd), 0, 0)
	b = r0 != 0
	return
}

func DefWindowProc(hWnd HWND, Msg UINT, wParam WPARAM, lParam LPARAM) (result LRESULT) {
	r0, _, _ := syscall.Syscall6(procDefWindowProcW.Addr(), 4, uintptr(hWnd), uintptr(Msg), uintptr(wParam), uintptr(lParam), 0, 0)
	result = LRESULT(r0)
	return
}

func EnableNonClientDpiScaling(hwnd HWND) (b bool, err error) {
	r0, _, e1 := syscall.Syscall(procEnableNonClientDpiScaling.Addr(), 1, uintptr(hwnd), 0, 0)
	b = r0 != 0
	if b == false {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetDC(hwnd HWND) (hdc HDC) {
	r0, _, _ := syscall.Syscall(procGetDC.Addr(), 1, uintptr(hwnd), 0, 0)
	hdc = HDC(r0)
	return
}

func GetDeviceCaps(hdc HDC, index int) (i int) {
	r0, _, _ := syscall.Syscall(procGetDeviceCaps.Addr(), 2, uintptr(hdc), uintptr(index), 0)
	i = int(r0)
	return
}

func ReleaseDC(hWnd HWND, hDC HDC) (b bool) {
	r0, _, _ := syscall.Syscall(procReleaseDC.Addr(), 2, uintptr(hWnd), uintptr(hDC), 0)
	b = r0 != 0
	return
}

func GetProcessDpiAwareness(hprocess syscall.Handle, value *ProcessDpiAwareness) (result HRESULT) {
	r0, _, _ := syscall.Syscall(procGetProcessDpiAwareness.Addr(), 2, uintptr(hprocess), uintptr(unsafe.Pointer(value)), 0)
	result = HRESULT(r0)
	return
}

func CreateSolidBrush(color COLORREF) (hBrush HBRUSH) {
	r0, _, _ := syscall.Syscall(procCreateSolidBrush.Addr(), 1, uintptr(color), 0, 0)
	hBrush = HBRUSH(r0)
	return
}
