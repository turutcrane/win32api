package main

import "log"

const (
	EOF     = -1
	UNKNOWN = 0
)

var keywords = map[string]int{
	// "var": VAR,
	"struct":     STRUCT,
	"ns":         NS,
	"failretval": FAILRETVAL,
	"noerr":      NOERR,
}

type Position struct {
	Line   int
	Column int
}

type Scanner struct {
	src      []rune
	offset   int
	lineHead int
	line     int
}

func (s *Scanner) Init(src string) {
	s.src = []rune(src)
}

func (s *Scanner) Scan() (tok int, lit string, pos Position) {
	s.skipWhiteSpace()
	pos = s.position()
	switch ch := s.peek(); {
	case isLetter(ch):
		lit = s.scanIdentifier()
		if keyword, ok := keywords[lit]; ok {
			tok = keyword
		} else {
			tok = IDENT
		}
	case isDigit(ch):
		tok, lit = NUMBER, s.scanNumber()

	default:
		switch ch {
		case -1:
			tok = EOF
		case '(', ')', ';', '+', '-', '*', '/', '%', '=', ',', '[', ']', '@':
			tok = int(ch)
			lit = string(ch)
		default:
			log.Println("T52:", string(ch))
		}
		s.next()
	}
	// log.Println("T56:", tok, lit)
	return
}

// ========================================

func isLetter(ch rune) bool {
	return 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' || ch == '_'
}

func isDigit(ch rune) bool {
	return '0' <= ch && ch <= '9'
}

func isHexDigit(ch rune) bool {
	return ('0' <= ch && ch <= '9') || ('a' <= ch && ch <= 'f') || ('A' <= ch && ch < 'F')
}

func isWhiteSpace(ch rune) bool {
	return ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r'
}

func (s *Scanner) peek() rune {
	if !s.reachEOF() {
		return s.src[s.offset]
	} else {
		return -1
	}
}

func (s *Scanner) next() {
	if !s.reachEOF() {
		if s.peek() == '\n' {
			s.lineHead = s.offset + 1
			s.line++
		}
		s.offset++
	}
}

func (s *Scanner) reachEOF() bool {
	return len(s.src) <= s.offset
}

func (s *Scanner) position() Position {
	return Position{Line: s.line + 1, Column: s.offset - s.lineHead + 1}
}

func (s *Scanner) skipWhiteSpace() {
	for isWhiteSpace(s.peek()) {
		s.next()
	}
}

func (s *Scanner) scanIdentifier() string {
	var ret []rune
	for isLetter(s.peek()) || isDigit(s.peek()) {
		ret = append(ret, s.peek())
		s.next()
	}
	return string(ret)
}

func (s *Scanner) scanNumber() string {
	var ret []rune
	var hex bool
	if s.peek() == '0' {
		ret = append(ret, s.peek())
		s.next()
		if !isDigit(s.peek()) {
			if s.peek() == 'x' || s.peek() == 'X' {
				hex = true
				ret = append(ret, s.peek())
				s.next()
			} else {
				return string(ret)
			}
		}
	}
	if hex {
		for isHexDigit(s.peek()) {
			ret = append(ret, s.peek())
			s.next()
		}
		if len(ret) == 0 {
			log.Println("T145: Hex has no digit:", ret)
		}
	} else {
		for isDigit(s.peek()) {
			ret = append(ret, s.peek())
			s.next()
		}
	}
	return string(ret)
}
